#Problem 1 - Word Scores
def getWordScore(word, n):
    """
    Returns the score for a word. Assumes the word is a valid word.

    The score for a word is the sum of the points for letters in the
    word, multiplied by the length of the word, PLUS 50 points if all n
    letters are used on the first turn.

    Letters are scored as in Scrabble; A is worth 1, B is worth 3, C is
    worth 3, D is worth 2, E is worth 1, and so on (see SCRABBLE_LETTER_VALUES)

    word: string (lowercase letters)
    n: integer (HAND_SIZE; i.e., hand size required for additional points)
    returns: int >= 0
    """
    score = 0
    for i in list(word):
        score += SCRABBLE_LETTER_VALUES[i]
    score *= len(word)
    if len(word) == n:
        score += 50
    return score



#Problem 2 - Dealing with Hands
def updateHand(hand, word):
    """
    Assumes that 'hand' has all the letters in word.
    In other words, this assumes that however many times
    a letter appears in 'word', 'hand' has at least as
    many of that letter in it. 

    Updates the hand: uses up the letters in the given word
    and returns the new hand, without those letters in it.

    Has no side effects: does not modify hand.

    word: string
    hand: dictionary (string -> int)    
    returns: dictionary (string -> int)
    """
    word_list = list(word)
    hand_copy = hand.copy()
    for letter in word_list:
        if letter in hand_copy.keys():
            hand_copy[letter] = hand_copy[letter] - 1    
    return hand_copy



#Problem 3 - Valid Words
def isValidWord(word, hand, wordList):
    """
    Returns True if word is in the wordList and is entirely
    composed of letters in the hand. Otherwise, returns False.

    Does not mutate hand or wordList.
   
    word: string
    hand: dictionary (string -> int)
    wordList: list of lowercase strings
    """
    count = 0
    check = hand.copy()
    if word in wordList:
        for i in list(word):
            if i in check.keys():
                count += 1
                check[i] -= 1
                if check[i] == 0:
                    del(check[i])
        if count == len(word):
            return True
        else:
            return False
    else:
        return False

#Problem 4 - Hand Length
def calculateHandlen(hand):
    """ 
    Returns the length (number of letters) in the current hand.
    
    hand: dictionary (string int)
    returns: integer
    """
    hand_keys = hand.keys()
    letters = 0
    for i in hand_keys:
        letters += hand[i]
    return letters



#Problem 5 - Playing a Hand
def playHand(hand, wordList, n):
    """
    Allows the user to play the given hand, as follows:
    * The hand is displayed.
    * The user may input a word or a single period (the string ".") 
      to indicate they're done playing
    * Invalid words are rejected, and a message is displayed asking
      the user to choose another word until they enter a valid word or "."
    * When a valid word is entered, it uses up letters from the hand.
    * After every valid word: the score for that word is displayed,
      the remaining letters in the hand are displayed, and the user
      is asked to input another word.
    * The sum of the word scores is displayed when the hand finishes.
    * The hand finishes when there are no more unused letters or the user
      inputs a "."
      hand: dictionary (string -> int)
      wordList: list of lowercase strings
      n: integer (HAND_SIZE; i.e., hand size required for additional points)  
    """
    print('Current Hand: ', end = '')
    displayHand(hand)
    # Ask user for input
    word = input('Enter a word, or a "." to indiacte that you are finished: ')
    wordscore = 0
    
    '''If the input is a single period:
        
    End the game (break out of the loop)'''
    while word != '.':
        if isValidWord(word, hand, wordList):   # If the word is not valid:
            wordscore += getWordScore(word, n)
            print('" '+word+' "'+' earned '+str(getWordScore(word, len(hand)))+' points. Total: '+str(wordscore)+' points.\n')
            hand = updateHand(hand, word)
        else:
            print('Invalid word, please try again.\n')
            print('Current Hand: ', end = '')
            displayHand(hand)
            word = input('Enter a word, or a "." to indiacte that you are finished: ')
            continue
            # To find if the hand is exhausted
        checkend = 0
        for i in hand.keys():
            checkend += hand[i]
        
        # Control if the hand is exausted
            
        if checkend == 0:
                # that is you ran out of letters so need to end the game
            print('\nRun out of letters. Total score: ', wordscore,'points.')
            break
        else:
            print('Current Hand: ', end = '')
            displayHand(hand)
            word = input('Enter a word, or a "." to indiacte that you are finished: ')        
        
    if word == '.':
        print('Goodbye! Total score: ', wordscore,'points')



#Problem 6 - Playing a Game
def playGame(wordList):
    """
    Allow the user to play an arbitrary number of hands.
 
    1) Asks the user to input 'n' or 'r' or 'e'.
      * If the user inputs 'n', let the user play a new (random) hand.
      * If the user inputs 'r', let the user play the last hand again.
      * If the user inputs 'e', exit the game.
      * If the user inputs anything else, tell them their input was invalid.
 
    2) When done playing the hand, repeat from step 1
    """
    dealings = input('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')
    checkstart = 1
    while True:
        if checkstart == 1 and dealings == 'r':
            print('You have not played a hand yet. Please play a new hand first!')
            dealings = input('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')
        elif dealings == 'n':
            hand = dealHand(HAND_SIZE)
            playHand(hand.copy(), wordList, HAND_SIZE)
            dealings = input('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')
            checkstart += 1
        elif dealings == 'r':
            playHand(hand.copy(), wordList, HAND_SIZE)
            dealings = input('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')
        elif dealings == 'e':
            break
        else:
            print('Invalid command.')
            dealings = input('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')



#Problem 7 - You and your Computer
def playGame(wordList):
    """
    Allow the user to play an arbitrary number of hands.
 
    1) Asks the user to input 'n' or 'r' or 'e'.
        * If the user inputs 'e', immediately exit the game.
        * If the user inputs anything that's not 'n', 'r', or 'e', keep asking them again.

    2) Asks the user to input a 'u' or a 'c'.
        * If the user inputs anything that's not 'c' or 'u', keep asking them again.

    3) Switch functionality based on the above choices:
        * If the user inputted 'n', play a new (random) hand.
        * Else, if the user inputted 'r', play the last hand again.
          But if no hand was played, output "You have not played a hand yet. 
          Please play a new hand first!"
        
        * If the user inputted 'u', let the user play the game
          with the selected hand, using playHand.
        * If the user inputted 'c', let the computer play the 
          game with the selected hand, using compPlayHand.

    4) After the computer or user has played the hand, repeat from step 1

    wordList: list (string)
    """
    dealings = input('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')
    
    checkstart = 1
    while True:
        if dealings == 'r' and checkstart == 1:
            print('You have not played a hand yet. Please play a new hand first!')
            dealings = input('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')
        elif dealings == 'n':
            checkstart += 1
            hand = dealHand(HAND_SIZE)
            while 1:
                youorcomputer = input('Enter u to have yourself play, c to have the computer play: ')
                if youorcomputer == 'u':
                    playHand(hand.copy(), wordList, HAND_SIZE)
                    break
                elif youorcomputer == 'c':
                    compPlayHand(hand.copy(), wordList, HAND_SIZE)
                    break
                else:
                    print('Invalid command.')
            dealings = input('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')
                
        elif dealings == 'r':
            while 1:
                youorcomputer = input('Enter u to have yourself play, c to have the computer play: ')
                if youorcomputer == 'u':
                    playHand(hand.copy(), wordList, HAND_SIZE)
                    break
                elif youorcomputer == 'c':
                    compPlayHand(hand.copy(), wordList, HAND_SIZE)
                    break
                else:
                    print('Invalid command.')
            dealings = input('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')
        elif dealings == 'e':
            break
        else:
            print('Invalid command.')
            dealings = input('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')
